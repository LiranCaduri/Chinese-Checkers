/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UI;

import Logic.Board;
import static Logic.Board.N;
import Logic.ComputerAI;
import Logic.Piece;
import Logic.Player;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Point;

/**              MainJPanel
 * ---------------------------------------
 * @author LiranCaduri
 * 
 *  Class MainJPanel - Game panel. 
 * ---------------------------------------
 */
public class MainJPanel extends javax.swing.JPanel {
    // Variables
    public static boolean redTurn = true; // is red turn of brown
    boolean playAble = false ,PvAI = false ,gameOver = false; // playAble - is its possible to play? , PvAI - is its a game vs AI? , gameOver - if there is a winner?
    boolean secondclick=false; // is its second click for choose a dest cell
    Point prev = new Point(); // src piece
    Board board; // game board
    InfoJPanel ijp; // info panel reference
    
    /*--------------------------------------------------------------------------
    General : The class constractor.

    Process : making new board.
    
    Output : instance of the class.
    --------------------------------------------------------------------------*/
    public MainJPanel() { // constractor
        initComponents();
        board = new Board(this); // new board
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setPreferredSize(new java.awt.Dimension(720, 720));
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 828, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 720, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
   
    /**--------------------------------------------------------------------------
    FuncName: formMouseClicked
    
    General : The function get a mouse click and do move on the second click.
    
    Input : evt - Mouse click event.
    
    Process : Get first click : checking if the game is playable and the game is not over, if its first click and 
            the 'refPlayer' have the piece that got clicked AND if its AI mode and its red player turn OR it's not AI mode, save the first click location in 'prev',
            run possibleLocations Algorithm on the location of the piece ,if the possible moves table is not empty set 'secondClick' to true and get second click.
    
            Get second click : Checking if the game is playable and the game is not over, if the possible moves table have the location of
            the second click AND if its AI mode and its red player turn or its not AI mode , remove the src piece and add the new piece in the location of the second click because its a possible move, 
            clear the possible moves table and turn the 'secondClick' to false and wait to another move.
    
            Else if the possible locations table don't have the location of the second click AND if its not AI mode and its red player turn or its not AI mode , so clear the possible moves table ,
            than if the second click is on the player game piece set 'prev' to the index of the second click like its the src piece and run possibleLocations Algorithm for it.  
            else if the second click is not on the player game piece set 'secondClick' to false.
    
            At the end run isWinner Algorithm to check if there is a winner to the game.
    
            After the human done a move and if it's AI mode Run the onClickAI Algorithm.
    
    Output : move in the game on the second click.
    
    Run Time : O(n) . 
    --------------------------------------------------------------------------*/
    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        // start onClick
        // --------------------Variables---------------------------
        Point index = new Point(evt.getX()/Board.CALCULATE_SIZE_ON_CLICK, evt.getY()/Board.CALCULATE_SIZE_ON_CLICK);
        int turnPlayer ,inverse_player;
        boolean isMoved = false; // for the AI | this kieeps the AI to do his move after the humen done.
        Player refPlayer ,winListPlayer;
        // ---------------------------------------------------
        
        if (playAble == true){ // we can play
            if(gameOver == false){ // is there is a winner
            
            // setting reference to players--------------------
            turnPlayer = redTurn ? 1 : 0;
            inverse_player = redTurn ? 0 : 1;
            refPlayer = board.getPlayers()[turnPlayer];
            winListPlayer = board.getPlayers()[inverse_player];
            // ------------------------------------------------
            
               if(!secondclick && refPlayer.getPieces().containsKey(index.x* N +index.y) && ( PvAI && redTurn || !PvAI)) { /* getting refplayer reference piece | for picking a piece to play / if its first click and 
                   the refplayer have the piece that got clicked AND if its AI mode and its red player turn or its not AI mode. */
                   // saving the piece index
                   prev.setLocation(index);
                   
                   // possible moves
                   board.possibleLocations(index, false);

                   if(!board.getLocations().isEmpty())
                       secondclick=true; // it's second click for dest cell
                   
                   System.out.println("Possible Moves Done.");
                   repaint(); // repaint for possible moves showing
               }
               //----------------------------------------------------
               else { // do move    
                   if(board.getLocations().containsKey(index.x* N +index.y) &&( PvAI && redTurn || !PvAI)){  // if the possiable locations table have the location of the secon click  AND if its AI mode and its red player turn or its not AI mode. 
                       //IF can move to the cell and NOT AI turn to play
                       board.removePiece(prev.x, prev.y, redTurn); // remove src piece
                       isMoved = addPieceAdjustment(index.x, index.y); // add dest piece
                       board.getLocations().clear(); // clear all possible moves to next turn
                       secondclick=false; // for picking a piece
                       repaint();// do move
                       
                   } // --------------------------------------------------------
                   else { // IF picking a different piece to play with
                       board.getLocations().clear(); // for possible moves of the new piece
                       
                       if(refPlayer.getPieces().containsKey(index.x* N +index.y)&&( PvAI && redTurn || !PvAI)){
                           //IF can use the piece (the piece is a the player piece) and NOT AI turn to play
                           // saving the piece index
                           prev.setLocation(index);
                           board.possibleLocations(index, false); // run possible moves for new piece
                       }
                       else { // for removing the marks of the green cell
                           secondclick = false;
                       }
                       repaint();// repaint after change of image
   
                   }// --------------------------------------------------------           
                }// end outter of else
            gameOver = board.isWinner(refPlayer,winListPlayer,ijp); 
            // -----------------------------------------------------
            if (PvAI && secondclick == false && refPlayer.getPieces().containsKey(index.x* N +index.y) && isMoved ){ // for AI move
            //IF AI is playing AND Human has finish his turn (IF pressed on red piece AND the piece has moved AND is finish his turn )
                System.out.println("-  in");// trace
                ((ComputerAI)board.getPlayers()[0]).onClickAI(board); // AI do move
                gameOver = board.isWinner(board.getPlayer0(), board.getPlayer1(), ijp); // if there is a winner
            }
        }
      }
        // end onClick
    }//GEN-LAST:event_formMouseClicked
      
    /**--------------------------------------------------------------------------
    FuncName: addPieceAdjustment
    
    General : The function adds a piece on the board and update the info panel.
    
    Input : x - the column index of the dest piece , y - the row index of the dest piece.
    
    Process : Run the addPiece algorithm on the x and y ,
            if the it success adding check if the game is not on AI mode set the turn to the other player than
            stop the timer reset the seconds of the timer start the timer change text color an change the text for the player
            set 'secondClick' to false and return 'success'.
    
    Output : true or false if success adding .
    
    Run Time : O(1) . 
    --------------------------------------------------------------------------*/
    public boolean addPieceAdjustment(int x,int y){  // add piece with adjustment
        boolean success = board.addPiece(x,y, redTurn);  // add piece
        if (success)
        {    
            if(!PvAI){ // if not AI mode switch the turn to the oppsite player
               redTurn=!redTurn;
            }
            if (!redTurn && !PvAI) { // if its not red player turn and not AI mode adjust info panel for Brown turn  
                ijp.getTimer().stop(); // stop the timer
                ijp.timeSet = InfoJPanel.SECONDS; // reset the timer
                ijp.getTimer().restart(); // start the timer
                ijp.getTurnLable().setForeground(new Color(147,73,0)); // text color
                ijp.getTurnLable().setText("Brown Turn");  // change text 
            }
            else {// if its  red player turn and not AI mode or not adjust info panel for red turn 
                ijp.getTimer().stop();// stop the timer
                ijp.timeSet = InfoJPanel.SECONDS;// reset the timer
                ijp.getTimer().restart();// start the timer
                ijp.getTurnLable().setForeground(Color.red);// text color
                ijp.getTurnLable().setText("Red Turn");// change text 
            }
            secondclick=false; // finish move return to first click
        }
        repaint();// paint the board
        return success;
    }

    public Board getBoard() { // get game board
        return board;
    }

    public void setIjp(InfoJPanel ijp) { // set info panel
        this.ijp = ijp;
    }

    public boolean isSecondclick() { //true or false if its second click
        return secondclick;
    }

    public void setSecondclick(boolean secondclick) { // set second click to true or false
        this.secondclick = secondclick;
    }

    public boolean isPvAI() { // true or false if its AI mode
        return PvAI;
    }

    public void setPvAI(boolean PvAI) { // set AI mode for true or false
        this.PvAI = PvAI;
    }

    public static boolean isRedTurn() { //true or false if its red player turn 
        return redTurn;
    }

    public boolean isPlayAble() { //true or false if its possible to play
        return playAble;
    }

    public void setPlayAble(boolean playAble) { // set possible to play for true or false
        this.playAble = playAble;
    }

    public void setBoard(Board board) { // set game board
        this.board = board;
    }
    
    public void startTimer(){ // start the timer
        if (redTurn)
            ijp.getTimer().start();
    }

    public void setGameOver(boolean gameOver) {
        this.gameOver = gameOver;
    }
    
    /**--------------------------------------------------------------------------
    FuncName: paint
    
    General : the function draw the board pieces on the board and the possible moves.
    
    Input : graphics - the graphics of the frame that the drawing will be on .
    
    Output : a draw of the pieces and the possible moves on the board.
    
    Run Time : O(n) because the number of possible moves to draw.
    --------------------------------------------------------------------------*/
    @Override
    public void paint (Graphics graphics){ // paint board and player
        
        if (playAble) // if the game is playable paint board
        {
            board.Draw(graphics); // draw board players and their game pieces 
            for (Piece p : board.getLocations().values()) { // draw all possible moves on the board
                board.colorMove(p.getCol(), p.getRow(),graphics);
            }
        } 
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
