/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UI;

import Logic.Board;
import Logic.ComputerAI;
import Logic.Player;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JLabel;
import javax.swing.Timer;

/**            InfoJPanel
 *--------------------------------------
 * @author lirancaduri
 * 
 * class InfoJPanel - Represent the Info panel.
 *--------------------------------------
 */
public class InfoJPanel extends javax.swing.JPanel {
 
    //constant
    public static final int SECONDS = 10; // constant fo the number of seconds to reset the timer
    
    //Variables
    public static int timeSet = SECONDS; // timer count down
    Board board ; //game board
    MainJPanel mjp; //game panel reference
    Timer timer;  // timer
        
    /*--------------------------------------------------------------------------
    General : The class constractor.
    
    Output : instance of the class.
    --------------------------------------------------------------------------*/
    public InfoJPanel() { // constractor
    
        // timer and his ActionListener
        this.timer = new Timer(1000, new ActionListener() {
            
            /**-------------------------------------------------------------------------
            FuncName: actionPerformed

            General : the function gets Action Listener every 1 second.

            Input : e - listener event .

*           Process : if time is no up update the lable ,if time is up and its AI mode AI does move ,
*           if its human mode switch the turn , reset the timer update 'turnLable' empty the possible move table ,
*           switch the 'secondClick' to false and start the timer.
 
            Output : status of the timer .

            Run Time : O(1)
            --------------------------------------------------------------------------*/
            @Override
            public void actionPerformed(ActionEvent e) {
                if (timeSet != -1) { // when getting to 0
                    InfoJPanel.jlbTimer.setText(String.valueOf(timeSet)); // timer lable
                    timeSet--; // count down
                }
                else{ // adjustment
                    if (mjp.PvAI) // if AI mode an the time is up
                        ((ComputerAI)board.getPlayer0()).onClickAI(board); // AI do move
                    else // not AI mode 
                        MainJPanel.redTurn = !MainJPanel.redTurn; //switch turn
                    
                    timeSet = SECONDS;  //reset the timer 
                     
                    // Adjust turn lable text and color
                    getTurnLable().setForeground(MainJPanel.redTurn ? Color.red : new Color(147, 73, 0));
                    getTurnLable().setText((MainJPanel.redTurn) && (!mjp.PvAI) || (MainJPanel.redTurn) ? "Red Turn" : "Brown Turn");
                    System.out.println("Timer in else");
                    
                    
                    if (!board.getLocations().isEmpty()){ // time is up and possible locations not empty
                        board.getLocations().clear(); // clear it
                        mjp.repaint();//paint the board
                        mjp.secondclick = false; // back to first click
                    } 
                    timer.restart(); // timer start again     
                }
            }
        }); // end of timer
        
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        turnLable = new javax.swing.JLabel();
        jlbTimer = new javax.swing.JLabel();
        jbPvai = new javax.swing.JButton();
        jvPvp = new javax.swing.JButton();
        jbRestart = new javax.swing.JButton();
        jbStart = new javax.swing.JButton();
        jLBplayer = new javax.swing.JLabel();

        setForeground(new java.awt.Color(153, 102, 0));

        turnLable.setFont(new java.awt.Font("Seravek", 1, 36)); // NOI18N
        turnLable.setForeground(new java.awt.Color(255, 51, 51));
        turnLable.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        turnLable.setText("Red Turn");

        jlbTimer.setFont(new java.awt.Font("Seravek", 1, 48)); // NOI18N
        jlbTimer.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlbTimer.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        jbPvai.setText("P v AI");
        jbPvai.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbPvaiActionPerformed(evt);
            }
        });

        jvPvp.setText("PvP");
        jvPvp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jvPvpActionPerformed(evt);
            }
        });

        jbRestart.setText("Restart");
        jbRestart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbRestartActionPerformed(evt);
            }
        });

        jbStart.setText("Start");
        jbStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbStartActionPerformed(evt);
            }
        });

        jLRplayer.setBackground(new java.awt.Color(0, 0, 0));
        jLRplayer.setForeground(new java.awt.Color(255, 0, 51));
        jLRplayer.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLRplayer.setText("Red Player - Human");

        jLBplayer.setForeground(new java.awt.Color(204, 102, 0));
        jLBplayer.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLBplayer.setText("Brown Player -");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(turnLable, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addGap(0, 63, Short.MAX_VALUE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(jlbTimer, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(67, 67, 67))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jvPvp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jbPvai, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jbStart, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(108, 108, 108)))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jbRestart, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(100, 100, 100))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLRplayer, javax.swing.GroupLayout.DEFAULT_SIZE, 155, Short.MAX_VALUE)
                    .addComponent(jLBplayer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(64, 64, 64))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(jLBplayer, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLRplayer)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(turnLable, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jlbTimer, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jbPvai)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jvPvp)
                .addGap(18, 18, 18)
                .addComponent(jbStart)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jbRestart)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    /**-------------------------------------------------------------------------
    FuncName: jbPvaiActionPerformed

    General : the function gets a press on AI mode button.

    Input : evt - button clicked event .

*   Process : the button pressed set player 0 to be AI 
* 
    Output : game in AI mode .

    Run Time : O(1)
    --------------------------------------------------------------------------*/
    private void jbPvaiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbPvaiActionPerformed
        // on click AI mode button
            // make the setting for the mode
            board.setPlayer0(new ComputerAI (0,3,0,3,"brown"));
            mjp.setPvAI(true);
    }//GEN-LAST:event_jbPvaiActionPerformed

    /**-------------------------------------------------------------------------
    FuncName: jvPvpActionPerformed

    General : the function gets a press on human mode button.

    Input : evt - button clicked event .

*   Process : the button pressed set player 0 to be human
* 
    Output : game in human vs human mode .

    Run Time : O(1)
    --------------------------------------------------------------------------*/
    private void jvPvpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jvPvpActionPerformed
       // on click humen mode button
            mjp.setPvAI(false);// make the setting for the mode
    }//GEN-LAST:event_jvPvpActionPerformed

    /**-------------------------------------------------------------------------
    FuncName: jbStartActionPerformed

    General : the function start the game.

    Input : evt - button clicked event .
    * 
    Process : set the game playable and start the timer

    Output : game .

    Run Time : O(1)
    --------------------------------------------------------------------------*/
    private void jbStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbStartActionPerformed
        // on click start game button
        mjp.playAble = true; // make the game possible to play
        timer.start(); //start timer
        jLBplayer.setText((mjp.PvAI) ? "Brown Player - Computer" : "Brown Player - Human" );// brown player lable if human or AI
        jLBplayer.setForeground(new Color(147, 73, 0));// color of lable
        mjp.repaint(); // paint the board
                
    }//GEN-LAST:event_jbStartActionPerformed

    /**-------------------------------------------------------------------------
    FuncName: jbRestartActionPerformed

    General : the function restart the game with mode for choosing.

    Input : evt - button clicked event .

    Process : make new game board set reference to the info panel stop timer reset timer and the 'redTurn' to true and playable to false
    if 'pvaiFlag' is true set player 0 to be AI else player 0 is Human.
    set 'turnLable' color and text and start the game.
    
    Output : new game .

    Run Time : O(1)
    --------------------------------------------------------------------------*/
    private void jbRestartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbRestartActionPerformed
        // on click restart game button
        //new game board
        mjp.setBoard(new Board(mjp));
        this.setBoard(mjp.getBoard());
        
        timer.stop(); // stop timer
        timeSet = SECONDS; //restart the seconds
        MainJPanel.redTurn = true; // make red player turn 
        mjp.playAble = false; // make the game not possible to play
        
        // replace mode
        if (mjp.PvAI){ // AI mode has requested
            board.setPlayer0(new ComputerAI (0,3,0,3,"brown")); // set the brown player as AI 
            mjp.setPvAI(true);
        }
        else{// AI mode has not been requested
            board.setPlayer0(new Player (0,3,0,3,"brown"));// set the brown player as humen 
            mjp.setPvAI(false);
        }

        // Adjust turn lable color and text
        getTurnLable().setForeground(MainJPanel.redTurn ? Color.red : new Color(147, 73, 0));
        getTurnLable().setText((MainJPanel.redTurn) && (!mjp.PvAI) || (MainJPanel.redTurn) ? "Red Turn" : "Brown Turn");
        jLBplayer.setText((mjp.PvAI) ? "Brown Player - Computer" : "Brown Player - Human" ); // brown player lable if human or AI
        jLBplayer.setForeground(new Color(147, 73, 0));// color of lable
        
        timer.start(); // start the timer
        mjp.playAble = true; // make the game possible to play
        mjp.setGameOver(false); // make the game possible to play
        // paint board
        mjp.repaint();
    }//GEN-LAST:event_jbRestartActionPerformed

    public JLabel getJlbTimer() { // get the timer lable
        return jlbTimer;
    }

    public JLabel getTurnLable() { // get the turn label
        return turnLable;
    }

    public void setBoard(Board board) { // set the game board
        this.board = board;
    }

    public Timer getTimer() { //get the timer
        return timer;
    }  

    public void setMjp(MainJPanel mjp) { // get the game panel
        this.mjp = mjp;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLBplayer;
    private final javax.swing.JLabel jLRplayer = new javax.swing.JLabel();
    private javax.swing.JButton jbPvai;
    private javax.swing.JButton jbRestart;
    private javax.swing.JButton jbStart;
    private static javax.swing.JLabel jlbTimer;
    private javax.swing.JButton jvPvp;
    private javax.swing.JLabel turnLable;
    // End of variables declaration//GEN-END:variables
}
